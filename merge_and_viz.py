'''
Usage: python merge_and_viz.py -m [mode] -g [graph] -o [prefix] file1.tsv file2.tsv ... filen.tsv 
Purpose: merge tables generated by make_tables.py and make several graphs to visualize GO Slim data 

Arguments: 
	-m, --mode		 Runmode (choices: both, merge)
	-g, --graph 	 Type of graph(s) to make (choices: all, none, bar, heatmap, bubble, pie)
	-o, --out        Prefix for output files

	Files with tables to be merged are given positional arguments after keyword arguments 

Jessie Pelosi 2023
'''

import pandas as pd
import argparse
import matplotlib.pyplot as plt
from matplotlib import colors
import numpy as np
import re
import sys
from functools import reduce
import seaborn as sns

parser = argparse.ArgumentParser()
parser.add_argument('-m', '--mode', dest = "run", choices = ['both', 'merge'])
parser.add_argument('-g', '--graph', dest = "graph", choices = ['all', 'bar','heatmap', 'bubble', 'pie', 'none'])
parser.add_argument('-o', '--out', dest='out')
parser.add_argument('file', nargs='*')
args = parser.parse_args()
RUNMODE=args.run
GRAPHS=args.graph
OUTFILE=args.out

if RUNMODE=="both":
	dataframe_list = []
	for fname in args.file: 
		temp_df = pd.read_table(fname)
		temp_df.columns = ['GOSlimTerm',fname]
		dataframe_list.append(temp_df)

	names = []
	for fname in args.file:
		fname = fname.strip()
		res = re.sub(r'([.]*)\.blast.*', r'\1', fname)
		res2 = res.strip()
		if not res2: continue
		names.append(res2)

	Output_df = reduce(lambda x, y: pd.merge(x, y, on = 'GOSlimTerm', how = 'outer'),dataframe_list)
	Output_df = Output_df.fillna(0)
	Output_df.columns = Output_df.columns.str.replace("([.]*)\.blast.*", "\1", regex = True)
	Output_df.to_csv(OUTFILE+"_aggregatedTable.tsv", sep='\t')

	if GRAPHS=="all":

		### Generate bubble plot ####
		df_bub=pd.melt(Output_df, id_vars = ['GOSlimTerm'])
		## Use these lines to edit the size and parameteres of the bubble graph figure 
		plt.figure(figsize = (6,12))
		plot=sns.scatterplot(data=df_bub, x="variable", y="GOSlimTerm", size="value", 
			legend=False, sizes=(5, 750), hue = 'variable', palette = 'Set3', alpha = 0.5)
		plot.set_xticks(np.arange(len(names))) 
		plot.set_xticklabels(names, size = 8)
		plt.xticks(rotation=45, ha='right')
		plt.xlabel('')
		plt.ylabel('')
		plt.tight_layout()
		plt.savefig(OUTFILE+'_bubbleGraph.png', format='png', dpi=300)

		### Generate heatmaps ###

		table_merge_num = Output_df.iloc[0:,1:]
		GOSlim_list = list(Output_df["GOSlimTerm"])

		fig, ax = plt.subplots(figsize=(15,15))
		im = ax.imshow(table_merge_num, cmap="rainbow")
		ax.set_title("", size=20)
		ax.set_xticks(np.arange(len(names))) 
		ax.set_xticklabels(names)
		plt.setp(ax.get_xticklabels(),rotation=45, ha="right", rotation_mode="anchor")
 
		ax.set_yticks(np.arange(len(GOSlim_list)))
		ax.set_yticklabels(GOSlim_list)

		fig.tight_layout()
		cbar = ax.figure.colorbar(im, ax=ax, shrink=0.5)
		ax.set_facecolor("white")

		plt.savefig(OUTFILE+"_heatmap.png", format='png',dpi=300)

		fig, ax = plt.subplots(figsize=(15,15))
		im = ax.imshow(table_merge_num, cmap="rainbow", norm=colors.SymLogNorm(vmin=0, vmax=table_merge_num.to_numpy().max(), linthresh=0.001, base=10))
		ax.set_xticks(np.arange(len(names)))
		ax.set_xticklabels(names)
		plt.setp(ax.get_xticklabels(),rotation=45, ha="right", rotation_mode="anchor")

		ax.set_yticks(np.arange(len(GOSlim_list)))
		ax.set_yticklabels(GOSlim_list)

		fig.tight_layout()
		cbar = ax.figure.colorbar(im, ax=ax, shrink=0.5)
		ax.set_facecolor("white")

		plt.savefig(OUTFILE+"_heatmap_lognorm.png", format='png',dpi=300)

		### Generate barplots ###

		plotdata = Output_df.set_index(list(Output_df)[0])
		plotdata.plot(kind="barh", figsize=(20,15), fontsize=12, width = 1, colormap = 'Set3')
		plt.xlabel("Proportion of Gene Set")
		plt.ylabel("")
		plt.legend(frameon=False, labels = names)
		plt.gca().invert_yaxis()
		plt.tight_layout()
		plt.savefig(OUTFILE+'_barGraph.png', format='png', dpi=300)

		### Generate pie charts (outputs one file for each input) ###

		for fname in args.file: 
			temp_df = pd.read_table(fname)
			temp_df.columns = ['GOSlimTerm',fname]
			temp_df.sort_values(fname, ascending = False, inplace=True)
			df2=temp_df[:10].copy()
			new_row=pd.DataFrame(data = {'GOSlimTerm' : ['others'],
				fname : [temp_df[fname][10:].sum()]
			})
			df2=pd.concat([df2, new_row])
			fig, axes = plt.subplots(nrows = 1, ncols = 1, figsize = (9,4))
			reg_name = re.sub(r'([.]*)\.blast.*', r'\1', fname)
			df2.plot(kind = 'pie', y = fname, title = reg_name, labels = df2['GOSlimTerm'], ax = axes, colormap = 'Set3', normalize=True)
			plt.ylabel('')
			plt.legend('',frameon=False) 
			plt.tight_layout()
			plt.savefig(OUTFILE+'_'+fname+'_pieChart.png', format='png', dpi=300)

	elif GRAPHS=="heatmap":
		table_merge_num = Output_df.iloc[0:,1:]
		GOSlim_list = list(Output_df["GOSlimTerm"])

		fig, ax = plt.subplots(figsize=(15,15))
		im = ax.imshow(table_merge_num, cmap="rainbow")
		ax.set_title("", size=20)
		ax.set_xticks(np.arange(len(names))) 
		ax.set_xticklabels(names)
		plt.setp(ax.get_xticklabels(),rotation=45, ha="right", rotation_mode="anchor")

		ax.set_yticks(np.arange(len(GOSlim_list)))
		ax.set_yticklabels(GOSlim_list)

		fig.tight_layout()
		cbar = ax.figure.colorbar(im, ax=ax, shrink=0.5)
		ax.set_facecolor("white")

		plt.savefig(OUTFILE+"_heatmap.png", format='png',dpi=300)

		fig, ax = plt.subplots(figsize=(15,15))
		im = ax.imshow(table_merge_num, cmap="rainbow", norm=colors.SymLogNorm(vmin=0, vmax=table_merge_num.to_numpy().max(), linthresh=0.001, base=10))
		ax.set_title("", size=20)
		ax.set_xticks(np.arange(len(names)))
		ax.set_xticklabels(names)
		plt.setp(ax.get_xticklabels(),rotation=45, ha="right", rotation_mode="anchor")

		ax.set_yticks(np.arange(len(GOSlim_list)))
		ax.set_yticklabels(GOSlim_list)

		fig.tight_layout()
		cbar = ax.figure.colorbar(im, ax=ax, shrink=0.5)
		ax.set_facecolor("white")

		plt.savefig(OUTFILE+"_heatmap_lognorm.png", format='png',dpi=300)

	elif GRAPHS=="bar":
		plotdata = Output_df.set_index(list(Output_df)[0])
		plotdata.plot(kind="barh", figsize=(20,15), fontsize=12, width = 1, colormap = 'Set3')
		plt.xlabel("Proportion of Gene Set")
		plt.ylabel("")
		plt.legend(frameon=False, labels = names)
		plt.gca().invert_yaxis()
		plt.tight_layout()
		plt.savefig(OUTFILE+'_barGraph.png', format='png', dpi=300)

	elif GRAPHS=="pie":
		for fname in args.file: 
			temp_df = pd.read_table(fname)
			temp_df.columns = ['GOSlimTerm',fname]
			temp_df.sort_values(fname, ascending = False, inplace=True)
			df2=temp_df[:10].copy()
			new_row=pd.DataFrame(data = {'GOSlimTerm' : ['others'],
				fname : [temp_df[fname][10:].sum()]
			})
			df2=pd.concat([df2, new_row])
			fig, axes = plt.subplots(nrows = 1, ncols = 1, figsize = (9,4))
			reg_name = re.sub(r'([.]*)\.blast.*', r'\1', fname)
			df2.plot(kind = 'pie', y = fname, title = reg_name, labels = df2['GOSlimTerm'], ax = axes, colormap = 'Set3', normalize=True)
			plt.ylabel('')
			plt.legend('',frameon=False) 
			plt.tight_layout()
			plt.savefig(OUTFILE+'_'+fname+'_pieChart.png', format='png', dpi=300)

	elif GRAPHS==("bubble"):
		df_bub=pd.melt(Output_df, id_vars = ['GOSlimTerm'])
		## Use these lines to edit the size and parameteres of the bubble graph figure 
		sns.set(font_scale=0.5, style = "white", rc={"figure.figsize":(5, 12)})
		plot=sns.scatterplot(data=df_bub, x="variable", y="GOSlimTerm", size="value", 
			legend=False, sizes=(5, 750), hue = 'variable', palette = 'Set3', alpha = 0.5)
		plot.set_xticks(np.arange(len(names))) 
		plot.set_xticklabels(names)
		plt.xticks(rotation=45, ha='right')
		plt.xlabel('')
		plt.ylabel('')
		plt.tight_layout()
		plt.savefig(OUTFILE+'_bubbleGraph.png', format='png', dpi=300)

elif RUNMODE=="merge":
	dataframe_list = []
	for fname in args.file: 
		temp_df = pd.read_table(fname)
		temp_df.columns = ['GOSlimTerm',fname]
		dataframe_list.append(temp_df)

	names = []
	for fname in args.file:
	    res = re.findall("(.*).blast", fname)
	    if not res: continue
	    names.append(res[0])

	Output_df = reduce(lambda x, y: pd.merge(x, y, on = 'GOSlimTerm', how = 'outer'),dataframe_list)
	Output_df = Output_df.fillna(0)
	Output_df.to_csv(OUTFILE+"_aggregatedTable.tsv", sep='\t')
